package com.javarush.telegrambot;

import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.HashMap;
import java.util.Map;

public class MyFirstTelegramBot extends MultiSessionTelegramBot {
    private static final String NAME = System.getenv("NAME");
    private static final String TOKEN = System.getenv("TOKEN");
    private static final String PET_CAT = "petCat";
    private static final String PET_DOG = "petDog";
    private Map<String, String> pets;

    public MyFirstTelegramBot() {
        super(NAME, TOKEN);
        initializePets();
    }

    private void initializePets() {
        pets = new HashMap<>();
        pets.put("–ö–æ—Ç", PET_CAT);
        pets.put("–°–æ–±–∞–∫–∞", PET_DOG);
    }

    @Override
    public void onUpdateEventReceived(Update updateEvent) {
        Message message = updateEvent.getMessage();

        if (message != null && message.hasText()) {
            String messageText = message.getText();
            if (isCommand(message.getText())) {
                executeCommand(messageText);
            } else {
                leaveLike();
            }
        }

        if (updateEvent.getCallbackQuery().getData() != null && updateEvent.getCallbackQuery().getData().contains("pet")) {
            handlePetSelection(updateEvent.getCallbackQuery().getData());
        }
    }

    private boolean isCommand(String messageText) {
        return messageText.startsWith("/");
    }

    private void choiceFavoritePet() {
        sendTextMessageAsync("–í–∞—à–µ –ª—é–±–∏–º–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?", pets);
    }

    private void handlePetSelection(String selectedPet) {
        switch (selectedPet) {
            case PET_CAT -> sendPhotoMessageAsync("step_4_pic");
            case PET_DOG -> sendPhotoMessageAsync("step_6_pic");
        }
    }

    private void leaveLike() {
        sendTextMessageAsync("üëç");
    }

    private void executeCommand(String messageText) {
        switch (messageText) {
            case "/start" -> sendTextMessageAsync("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –ø–æ–∏–≥—Ä–∞—Ç—å!");
            case "/bye" -> sendTextMessageAsync("Asta la vista, baby!");
            case "/pet" -> choiceFavoritePet();
            case "/like" -> leaveLike();
            case "/help" -> sendTextMessageAsync("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è 5 –∫–æ–º–∞–Ω–¥—ã:\n" +
                    " /start - —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–º–∞–Ω–¥–∞\n" +
                    " /bye - –ø—Ä–æ—â–∞–ª—å–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞\n" +
                    " /pet - –∫–æ–º–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ –ª—é–±–∏–≥–æ –ø–∏—Ç–æ–º—Ü–∞\n" +
                    " /like - leave a like\n" +
                    " /help - –∫–æ–º–º–∞–Ω–¥–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏");
            default -> sendTextMessageAsync("*–±–∏–±—É–±–∏–ø –∫–æ–º–º–∞–Ω–¥—É –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å*");
        }
    }

    public static void main(String[] args) {
        try {
            TelegramBotsApi telegramBotsApi = new TelegramBotsApi(DefaultBotSession.class);
            telegramBotsApi.registerBot(new MyFirstTelegramBot());
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
